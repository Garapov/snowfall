{"version":3,"file":"snowfall.umd.js","sources":["../src/snowflake.js","../src/index.js"],"sourcesContent":["export class Snowflake {\n    constructor(x, y, radius, speed, wind, color = 'white') {\n        // Store initial properties for reuse\n        this.initialX = x;\n        this.initialRadius = radius;\n        this.initialSpeed = speed;\n        this.color = color;\n        \n        // Current state\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.speed = speed;\n        this.wind = wind;\n        this.isReset = false;\n    }\n\n    update(canvasHeight, wind) {\n        this.y += this.speed;\n        this.x += wind;\n\n        // Simple bounds check\n        this.isReset = this.y > canvasHeight + this.radius * 2;\n    }\n\n    draw(ctx) {\n        // Skip drawing if offscreen\n        if (this.y < -this.radius * 2) return;\n        \n        // Use optimized circle drawing\n        ctx.beginPath();\n        ctx.arc(this.x | 0, this.y | 0, this.radius, 0, 6.283); // 6.283 â‰ˆ 2 * Math.PI, avoid calculation\n        ctx.fillStyle = this.color;\n        ctx.fill();\n    }\n\n    reset(x, y) {\n        this.x = x;\n        this.y = y;\n        this.isReset = false;\n    }\n}","import { Snowflake } from './snowflake';\n\nclass SnowfallCanvas {\n    constructor(canvas, options = {}) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d', { alpha: true }); // Enable transparent background\n        \n        // Default options\n        this.options = {\n            count: options.count || 100,\n            minRadius: options.minRadius || 2,\n            maxRadius: options.maxRadius || 5,\n            minSpeed: options.minSpeed || 1,\n            maxSpeed: options.maxSpeed || 3,\n            wind: options.wind || 0,\n            color: options.color || 'white',\n            opacity: options.opacity || 0.8,\n            ...options\n        };\n\n        this.snowflakes = new Array(this.options.count); // Pre-allocate array\n        this.isRunning = false;\n        this.animationFrame = null;\n        this.lastTime = 0;\n        this.frameInterval = 1000 / 60; // Target 60 FPS\n\n        // Bind methods that are used in animation loop\n        this.animate = this.animate.bind(this);\n\n        // Initialize after setting canvas dimensions\n        this.resize();\n        this.init();\n\n        // Debounced resize handler\n        let resizeTimeout;\n        window.addEventListener('resize', () => {\n            if (resizeTimeout) clearTimeout(resizeTimeout);\n            resizeTimeout = setTimeout(() => {\n                this.resize();\n                // Redistribute snowflakes across the new canvas width\n                const width = this.canvas.width;\n                this.snowflakes.forEach(snowflake => {\n                    snowflake.x = Math.random() * width;\n                });\n            }, 150);\n        });\n    }\n\n    init() {\n        const { width, height } = this.canvas;\n        \n        // Create snowflakes in a single loop\n        for (let i = 0; i < this.options.count; i++) {\n            const x = Math.random() * width;\n            const y = Math.random() * height - height; // Start above the canvas\n            this.snowflakes[i] = this.createSnowflake(x, y);\n        }\n    }\n\n    createSnowflake(x = null, y = null) {\n        const { minRadius, maxRadius, minSpeed, maxSpeed, wind, color } = this.options;\n        \n        const radius = Math.random() * (maxRadius - minRadius) + minRadius;\n        // Calculate speed based on radius - bigger snowflakes fall faster\n        const radiusRatio = (radius - minRadius) / (maxRadius - minRadius);\n        const speed = minSpeed + (maxSpeed - minSpeed) * radiusRatio;\n        \n        x = x ?? Math.random() * this.canvas.width;\n        y = y ?? Math.random() * -this.canvas.height;\n\n        return new Snowflake(x, y, radius, speed, wind, color);\n    }\n\n    resize() {\n        const { offsetWidth, offsetHeight } = this.canvas;\n        this.canvas.width = offsetWidth;\n        this.canvas.height = offsetHeight;\n        \n        // Set constant properties\n        this.ctx.fillStyle = 'white';\n    }\n\n    start() {\n        if (!this.isRunning) {\n            this.isRunning = true;\n            this.lastTime = performance.now();\n            this.animate();\n        }\n    }\n\n    stop() {\n        this.isRunning = false;\n        if (this.animationFrame) {\n            cancelAnimationFrame(this.animationFrame);\n            this.animationFrame = null;\n        }\n    }\n\n    animate(currentTime = 0) {\n        if (!this.isRunning) return;\n\n        // Control frame rate\n        const elapsed = currentTime - this.lastTime;\n        if (elapsed < this.frameInterval) {\n            this.animationFrame = requestAnimationFrame(this.animate);\n            return;\n        }\n        this.lastTime = currentTime - (elapsed % this.frameInterval);\n\n        const { width, height } = this.canvas;\n        const { wind } = this.options;\n        \n        this.ctx.clearRect(0, 0, width, height);\n        \n        // Update and draw in a single loop\n        for (let i = 0; i < this.snowflakes.length; i++) {\n            const snowflake = this.snowflakes[i];\n            snowflake.update(height, wind);\n            \n            if (snowflake.isReset) {\n                const x = Math.random() * width;\n                // When resetting, recalculate speed based on radius\n                const radiusRatio = (snowflake.radius - this.options.minRadius) / (this.options.maxRadius - this.options.minRadius);\n                snowflake.speed = this.options.minSpeed + (this.options.maxSpeed - this.options.minSpeed) * radiusRatio;\n                snowflake.wind = wind;\n                snowflake.reset(x, -10);\n            }\n            \n            snowflake.draw(this.ctx);\n        }\n\n        this.animationFrame = requestAnimationFrame(this.animate);\n    }\n\n    updateOptions(newOptions) {\n        const oldOptions = { ...this.options };\n        this.options = { ...this.options, ...newOptions };\n        \n        // Update snowflakes count if needed\n        if (newOptions.count !== undefined) {\n            const diff = newOptions.count - this.snowflakes.length;\n            \n            if (diff > 0) {\n                // Add more snowflakes\n                const currentLength = this.snowflakes.length;\n                for (let i = 0; i < diff; i++) {\n                    this.snowflakes[currentLength + i] = this.createSnowflake();\n                }\n            } else if (diff < 0) {\n                // Remove excess snowflakes\n                this.snowflakes.length = newOptions.count;\n            }\n        }\n\n        // Cache frequently accessed values\n        const { minRadius, maxRadius, minSpeed, maxSpeed, wind } = this.options;\n\n        // Update sizes and speeds if radius changes\n        if (newOptions.minRadius !== undefined || newOptions.maxRadius !== undefined) {\n            const oldRadiusRange = oldOptions.maxRadius - oldOptions.minRadius;\n            const newRadiusRange = maxRadius - minRadius;\n            \n            this.snowflakes.forEach(snowflake => {\n                // Keep the same relative size ratio when updating radius\n                const oldRadiusRatio = (snowflake.radius - oldOptions.minRadius) / oldRadiusRange;\n                \n                // Calculate new radius maintaining the same relative position in the range\n                snowflake.radius = minRadius + (oldRadiusRatio * newRadiusRange);\n                \n                // Update speed based on new radius\n                const radiusRatio = (snowflake.radius - minRadius) / newRadiusRange;\n                snowflake.speed = minSpeed + (maxSpeed - minSpeed) * radiusRatio;\n            });\n        }\n\n        // Update wind for all snowflakes if wind changes\n        if (newOptions.wind !== undefined) {\n            this.snowflakes.forEach(snowflake => {\n                snowflake.wind = wind;\n            });\n        }\n\n        // Update color for all snowflakes if color changes\n        if (newOptions.color !== undefined) {\n            this.snowflakes.forEach(snowflake => {\n                snowflake.color = this.options.color;\n            });\n        }\n    }\n}\n\nexport default SnowfallCanvas;"],"names":[],"mappings":"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"}